
/* UnderWater Chat App | Franck Bourzat | IMDEA Networks */

package View;

import Config.csv_read;
import ConsoleDisplay.display;
import ImageProcessing.Rescaling;
import Network.TCPclient;
import Network.TCPreceiver;
import static Network.TCPreceiver.stateFile;
import static Network.TCPreceiver.stateFileLocal;
import static View.ATConsole.jSendAT;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.InputMap;
import static javax.swing.JComponent.WHEN_FOCUSED;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;
import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.View;


public class MainInterface extends javax.swing.JFrame {

    
   public static TCPclient tcpclient;
   private static final String plus = "+++";
   private int plusCpt = 0 ; 
   private final byte plusByte = 0x2b ;
    private boolean triplePlus = false ;
    public static boolean state = false ;
    public boolean clickable = false ; 
    int i = 0;
    public static String remoteAdr;
    public static String ATadr;
    
    
    public MainInterface() {
        initComponents();
       
        /* Display parameters */
        jAreaConv.setLineWrap(true);
        jAreaConv.setWrapStyleWord(true);
        //jAreaConv.setEditable(false);
 

        jSend.setLineWrap(true);
        jSend.setWrapStyleWord(true);
        jSend.setEditable((false));
 
       jScrollPane2.setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_NEVER);
     
       
        
      
        
        
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); // closing socket
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jAreaConv = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jSend = new javax.swing.JTextArea();
        jScale = new javax.swing.JLabel();
        jConsole = new javax.swing.JLabel();
        jMyRemAdr = new javax.swing.JLabel();
        jMyAdr = new javax.swing.JLabel();
        jSendIcon = new javax.swing.JLabel();
        jProfil = new javax.swing.JLabel();
        jFile = new javax.swing.JLabel();
        jChat = new javax.swing.JButton();
        jAdr = new javax.swing.JTextField();
        jBoxModem = new javax.swing.JComboBox<>();
        jIPModemLabel = new javax.swing.JLabel();
        jRemAdrLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jAreaConv.setEditable(false);
        jAreaConv.setColumns(20);
        jAreaConv.setRows(5);
        jAreaConv.setFocusable(false);
        jScrollPane1.setViewportView(jAreaConv);

        jSend.setBackground(new java.awt.Color(239, 239, 239));
        jSend.setColumns(20);
        jSend.setRows(5);
        jSend.setAutoscrolls(false);
        jSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSendMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSendMouseClicked(evt);
            }
        });
        jSend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSendKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jSend);

        jScale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/scale.png"))); // NOI18N
        jScale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScaleMouseClicked(evt);
            }
        });

        jConsole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Console.png"))); // NOI18N
        jConsole.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jConsoleMouseClicked(evt);
            }
        });

        jSendIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/paper-plane.png"))); // NOI18N
        jSendIcon.setText("jLabel1");
        jSendIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSendIconMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSendIconMouseClicked(evt);
            }
        });

        jProfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/profile-user.png"))); // NOI18N

        jFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/clip.png"))); // NOI18N
        jFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jFileMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFileMouseClicked(evt);
            }
        });

        jChat.setBackground(new java.awt.Color(255, 255, 255));
        jChat.setText("Connect");
        jChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChatActionPerformed(evt);
            }
        });

        jAdr.setEditable(false);
        jAdr.setBackground(new java.awt.Color(182, 208, 243));
        jAdr.setFocusable(false);

        jBoxModem.setBackground(new java.awt.Color(255, 255, 255));
        jBoxModem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));

        jIPModemLabel.setText("Connected on local transceiver :");

        jRemAdrLabel.setText("Transceiver local address :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRemAdrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jMyRemAdr, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jIPModemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jMyAdr, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jConsole))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jProfil)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBoxModem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jChat))
                            .addComponent(jAdr, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSendIcon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFile, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScale)
                            .addComponent(jConsole)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jIPModemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                            .addComponent(jMyAdr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRemAdrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jMyRemAdr, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBoxModem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jChat))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jAdr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jProfil)))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSendIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jFile)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(182, 208, 243));

        jMenu1.setText("File");

        jMenuItem1.setText("Received");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Rescaled");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        jMenuItem6.setText("See Manuals");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem5.setText("Addressing configuration");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem4.setText("Symbiosis project");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem3.setText("EvoLogics Website");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChatActionPerformed
        try {
            jAreaConv.setText("");
            clickable = true; 
            jSend.setEditable((true));
          
            
            

            csv_read read = new csv_read();

            tcpclient = new TCPclient(read.list.get(0).get(0),9200); // create Client Socket on IPadr,Port
            TCPreceiver thread = new TCPreceiver(tcpclient.socket) ;
            // Create the thread in charge of listening input streams
            thread.start();

            jSend.setText("Type something here...");
            jSend.setForeground(Color.lightGray);
            remoteAdr = jBoxModem.getSelectedItem().toString();
            DataOutputStream out = new DataOutputStream(tcpclient.socket.getOutputStream());

            //if( i == 0){
                String ATdrop_buff = "+++ATZ4"+"\n"; // clear the transmission buffer before set up a new remote Address
                tcpclient.SendAT(ATdrop_buff);

                //  i=1;
                //}

            ATadr = "+++AT!AR"+remoteAdr+"\n" ;

            tcpclient.SendAT(ATadr);

            csv_read readAdr = new csv_read();
            
            if (remoteAdr.equals("0")){
                jAdr.setText("Listen Mode");
            }
            else{
             

                jAdr.setText(readAdr.getAdr());
            }

            } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jChatActionPerformed

    private void jFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFileMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileMouseClicked

    private void jFileMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFileMousePressed
       System.out.println(stateFileLocal);
        if(stateFileLocal){
            
            if(clickable){
                if(stateFile){
                JFileChooser popMenu = new JFileChooser("/home");

                popMenu.setDialogTitle("Choose a file to send");
                popMenu.setFileSelectionMode(JFileChooser.FILES_ONLY);
                popMenu.setMultiSelectionEnabled(false);

                FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG, PNG, PDF & TIF", "jpeg", "png","pdf","jpg","tif");
                popMenu.setFileFilter(filter); //desactiver le type par défault ??

                // cancel button
                int result = popMenu.showDialog(null,"Send");
                if (result == JFileChooser.APPROVE_OPTION) {
                    try {

                        File selectedFile = popMenu.getSelectedFile();
                        jFile.setVisible(true);



                        /* if user wants to rescale an image */
                        if (state){

                            String fileName = selectedFile.getName();
                            Rescaling res = new Rescaling(fileName);

                            File fileToSend = res.RescaleProcess(selectedFile);
                            tcpclient.SendFile(fileToSend); // Perform the sending of the file selected
                            state = false ;

                        }
                        /* no scaling */
                        else if (!state){
                            tcpclient.SendFile(selectedFile);
                        }



                    } catch (IOException ex) {
                        Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                    }



                } else if (result == JFileChooser.CANCEL_OPTION) {
                    jFile.setVisible(true);

                }
            }
            }
        }
    }//GEN-LAST:event_jFileMousePressed

    private void jSendIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSendIconMouseClicked
        jSend.setText("");
        jSend.setForeground(Color.BLACK);
    }//GEN-LAST:event_jSendIconMouseClicked

    private void jSendIconMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSendIconMousePressed
        try {
            if(stateFileLocal){
                if(stateFile){
                    if(clickable){
                    // When clicked take the text written from the jSend write it in the display text area and send it to remote host

                    String Text = jSend.getText();

                    /* avoid String text to be interpreted as AT command */
                    char[] charArray = Text.toCharArray();
                    for ( int i = 0 ; i < charArray.length ; i++){
                        if (charArray[i] == plusByte){
                            plusCpt++;
                        }
                        if (plusCpt == 3){
                            triplePlus = true;
                        }

                    }

                    plusCpt = 0 ;

                    if ( triplePlus == false){
                        tcpclient.SendMessage(Text+"\n");
                        jSend.setText("");
                        jAreaConv.append("[Me] : "+Text+"\n");
                        jAreaConv.append("\n");
                        jAreaConv.setCaretPosition(jAreaConv.getDocument().getLength()); // auto scroll when adding text

                    }
                    triplePlus = false ;
                    }
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jSendIconMousePressed

    private void jConsoleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jConsoleMouseClicked
        
        if(stateFileLocal){
            if (stateFile){  //boolean to  avoid the sending of AT commands while a file is received
                ATConsole ATconsole = new ATConsole();
                ATconsole.setVisible(true);
                ATconsole.setTitle("AT commands console");
                ATconsole.setLocationRelativeTo(null);
                jSendAT.setText("Type AT commands here...");
                jSendAT.setForeground(Color.lightGray);
                if (clickable){
                    jSendAT.setEditable(true);
                }
                else{
                    jSendAT.setEditable(false);
            }
        }
        }
        
    }//GEN-LAST:event_jConsoleMouseClicked

    private void jScaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScaleMouseClicked
        if(clickable){
        ScalingOption scale = new ScalingOption();
        scale.setVisible(true);
        scale.setTitle("Scaling Option");
        scale.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_jScaleMouseClicked

    private void jSendMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSendMousePressed
        
    }//GEN-LAST:event_jSendMousePressed

    private void jSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSendMouseClicked
        jSend.setText("");
        jSend.setForeground(Color.BLACK);
    }//GEN-LAST:event_jSendMouseClicked

    private void jSendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSendKeyPressed
        if(!stateFileLocal){
            if (evt.getKeyChar() == '\n'){

                    }
            else {
                if (evt.getKeyChar() == '\n'){
                    try {
                        int condition = WHEN_FOCUSED;
                        // get our maps for binding from the chatEnterArea JTextArea
                        InputMap inputMap = jSend.getInputMap(condition);
                        KeyStroke enterStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);

                        // tell input map that we are handling the enter key
                        inputMap.put(enterStroke, enterStroke.toString());
                        String Text = jSend.getText();



                        /* avoid String text to be interpreted as AT command */
                        /*
                        char[] charArray = Text.toCharArray();
                        for ( int i = 0 ; i < charArray.length ; i++){
                            if (charArray[i] == plusByte){
                                plusCpt++; 
                            }
                            if (plusCpt == 3){
                                triplePlus = true;
                                charArray[i-2] = '&';
                                charArray[i-1] = '1';
                                charArray[i] ='A';
                            }
                        }
                        plusCpt = 0 ;
                        if ( triplePlus == false){
                        */
                                tcpclient.SendMessage(Text+"\n");
                                jSend.setText("");
                                jAreaConv.append("[Me] : "+Text+"\n");
                                jAreaConv.append("\n");
                                jAreaConv.setCaretPosition(jAreaConv.getDocument().getLength()); // auto scroll when adding text

                        //}
                       // triplePlus = false ; 




                    } catch (IOException ex) {
                        Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                    }
               }
            }
        }
            else{
   
                 if(!stateFile){
                    if (evt.getKeyChar() == '\n'){

                    }
                 }
                    else {
                          if (evt.getKeyChar() == '\n'){
                            try {
                                int condition = WHEN_FOCUSED;
                                // get our maps for binding from the chatEnterArea JTextArea
                                InputMap inputMap = jSend.getInputMap(condition);
                                KeyStroke enterStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);

                                // tell input map that we are handling the enter key
                                inputMap.put(enterStroke, enterStroke.toString());
                                String Text = jSend.getText();



                                /* avoid String text to be interpreted as AT command */
                                /*
                                char[] charArray = Text.toCharArray();
                                for ( int i = 0 ; i < charArray.length ; i++){
                                    if (charArray[i] == plusByte){
                                        plusCpt++; 
                                    }
                                    if (plusCpt == 3){
                                        triplePlus = true;
                                        charArray[i-2] = '&';
                                        charArray[i-1] = '1';
                                        charArray[i] ='A';
                                    }
                                }
                                plusCpt = 0 ;
                                if ( triplePlus == false){
                                */
                                        tcpclient.SendMessage(Text+"\n");
                                        jSend.setText("");
                                        jAreaConv.append("[Me] : "+Text+"\n");
                                        jAreaConv.append("\n");
                                        jAreaConv.setCaretPosition(jAreaConv.getDocument().getLength()); // auto scroll when adding text

                                //}
                               // triplePlus = false ; 




                            } catch (IOException ex) {
                                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                            }
                       }
                            }
        }


        
               
              


    }//GEN-LAST:event_jSendKeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            Process proc = Runtime.getRuntime().exec("nautilus ./Files/Received");
        } catch (IOException ex) {
            Logger.getLogger(ATConsole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        try {
            Process proc = Runtime.getRuntime().exec("nautilus ./Files/Rescaled");
          
        } catch (IOException ex) {
            Logger.getLogger(ATConsole.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
            try {
            Process proc = Runtime.getRuntime().exec("sensible-browser http://symbiosis.networks.imdea.org");
          
        } catch (IOException ex) {
            Logger.getLogger(ATConsole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            Process proc = Runtime.getRuntime().exec("sensible-browser https://www.evologics.de");
        } catch (IOException ex) {
            Logger.getLogger(ATConsole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
         try {
            Process proc = Runtime.getRuntime().exec("nautilus .");
            
        } catch (IOException ex) {
            Logger.getLogger(ATConsole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
           Process proc1 = Runtime.getRuntime().exec("nautilus ./EvoLogics/Manuals");
           
        } catch (IOException ex) {
            Logger.getLogger(ATConsole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainInterface main = new MainInterface();
                main.setVisible(true);
                main.setTitle("Chat Window");
                main.setLocationRelativeTo(null);
                 new Thread() {
                public void run() {
                    try {
                        display dis = new display();
                        dis.welcome();
   
                        csv_read adr_socket = new csv_read();
                        adr_socket.read();
                        
                        csv_read read = new csv_read();
            
                        String myRemoteAdr = adr_socket.list.get(0).get(1);
                        String myIPadr = adr_socket.list.get(0).get(0);
                        
                        jBoxModem.removeItem(myRemoteAdr); // remove myRemoteAddress from the list of remote modem
                        jMyAdr.setText(myIPadr);
                        jMyRemAdr.setText(myRemoteAdr);
                        
                        dis.SelectRemAdr();
      
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                    } 
                }
               }.start();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField jAdr;
    public static javax.swing.JTextArea jAreaConv;
    public static javax.swing.JComboBox<String> jBoxModem;
    private javax.swing.JButton jChat;
    public static javax.swing.JLabel jConsole;
    private javax.swing.JLabel jFile;
    private static javax.swing.JLabel jIPModemLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    public static javax.swing.JLabel jMyAdr;
    public static javax.swing.JLabel jMyRemAdr;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jProfil;
    public static javax.swing.JLabel jRemAdrLabel;
    private javax.swing.JLabel jScale;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea jSend;
    private javax.swing.JLabel jSendIcon;
    // End of variables declaration//GEN-END:variables
}
